# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data_to_model[!sample_to_model, ]
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data[!sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
# ROC CURVE -------------------------------------------------------------------------------------------
library(pROC)
roc_svm_train <- roc(response = train$Class, predictor =as.numeric(svm_model$fitted))
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results))
plot(roc_svm_train)
plot(roc_svm_test)
# Code by https://rviews.rstudio.com/
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# tune ---------------------------------------------------------
set.seed (123)
tune.out = tune(svm,
Class ~ .,
data=train,
kernel ="radial",
ranges =list (cost=c(0.1 ,1 ,10 ,100 ,1000),
gamma =c(0.5 ,1 ,2 ,3 ,4) ))
tune.out
svm_model_tune = svm(Class ~ ., data = train, kernel = "radial", cost = 1,scale = TRUE,gamma=0.5)
table (svm_model_tune$fitted , train$Class )
caret::confusionMatrix(svm_model_tune$fitted,train$Class)
# Test Validation --------------------------------------------
results_tune= predict(svm_model_tune,test[,!names(test) %in% c("Class")])
table(results_tune,test$Class)
caret::confusionMatrix(results_tune,test$Class)
roc_svm_tune_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_tune_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
summary(svm_model_tune)
summary (svm_model)
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data[!sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
# ROC CURVE -------------------------------------------------------------------------------------------
library(pROC)
roc_svm_train <- roc(response = train$Class, predictor =as.numeric(svm_model$fitted))
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results))
plot(roc_svm_train)
plot(roc_svm_test)
# Code by https://rviews.rstudio.com/
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# tune ---------------------------------------------------------
set.seed (123)
tune.out = tune(svm,
Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data=train,
kernel ="radial",
ranges =list (cost=c(0.1 ,1 ,10 ,100 ,1000),
gamma =c(0.5 ,1 ,2 ,3 ,4) ))
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data[!sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
# ROC CURVE -------------------------------------------------------------------------------------------
library(pROC)
roc_svm_train <- roc(response = train$Class, predictor =as.numeric(svm_model$fitted))
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results))
plot(roc_svm_train)
plot(roc_svm_test)
# Code by https://rviews.rstudio.com/
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# tune ---------------------------------------------------------
set.seed (123)
tune.out = tune(svm,
Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data=train,
kernel ="radial",
ranges =list (cost=c(0.1 ,1 ,10 ,100 ,1000),
gamma =c(0.5 ,1 ,2 ,3 ,4) ))
tune.out
svm_model_tune = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate, data = train, kernel = "radial", cost = 1,scale = TRUE,gamma=0.5)
table (svm_model_tune$fitted , train$Class )
caret::confusionMatrix(svm_model_tune$fitted,train$Class)
# Test Validation --------------------------------------------
results_tune= predict(svm_model_tune,test[,!names(test) %in% c("Class")])
table(results_tune,test$Class)
caret::confusionMatrix(results_tune,test$Class)
roc_svm_tune_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_tune_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
summary(svm_model_tune)
saveRDS(svm_model_tune,here('object/svm_model_simples.R'))
shiny::runApp('SVM')
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data[!sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
summary(results)
results
runApp('SVM')
runApp('SVM')
print(results)
print(results[1])
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
as.data.frame(results)
runApp('SVM')
runApp('SVM')
runApp('SVM')
class(results)
print(results)
runApp('SVM')
results
results[1]
attr(results)
values(results)
runApp('SVM')
predict(svm_model_tune,test[,!names(test) %in% c("Class")])
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data[!sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
results
# ROC CURVE -------------------------------------------------------------------------------------------
library(pROC)
roc_svm_train <- roc(response = train$Class, predictor =as.numeric(svm_model$fitted))
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results))
plot(roc_svm_train)
plot(roc_svm_test)
# Code by https://rviews.rstudio.com/
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# tune ---------------------------------------------------------
set.seed (123)
tune.out = tune(svm,
Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data=train,
kernel ="radial",
ranges =list (cost=c(0.1 ,1 ,10 ,100 ,1000),
gamma =c(0.5 ,1 ,2 ,3 ,4) ))
results
results[1]
results |> as.data.frame()
shiny::runApp('SVM')
attr(results "decision.values")[1:4,]
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
attr(results "decision.values")
attr(results, "decision.values")
results= predict(svm_model,test[,!names(test) %in% c("Class")], probability = TRUE)
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50,probability = T)
results= predict(svm_model,test[,!names(test) %in% c("Class")], probability = TRUE)
results
library(here)
library(tidyverse)
library(e1071)
# Load objects
data=readRDS(here('object/data_to_model.R'))
data=data[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample_to_model, ]
test   <- data[!sample_to_model, ]
svm_model = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50,probability = T)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], probability = TRUE)
results
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
attr(results, "decision.values")
# ROC CURVE -------------------------------------------------------------------------------------------
library(pROC)
roc_svm_train <- roc(response = train$Class, predictor =as.numeric(svm_model$fitted))
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results))
plot(roc_svm_train)
plot(roc_svm_test)
# Code by https://rviews.rstudio.com/
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# tune ---------------------------------------------------------
set.seed (123)
tune.out = tune(svm,
Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate,
data=train,
kernel ="radial",
ranges =list (cost=c(0.1 ,1 ,10 ,100 ,1000),
gamma =c(0.5 ,1 ,2 ,3 ,4) ))
tune.out
svm_model_tune = svm(Class ~ gendera + hypertensive + atrialfibrillation + Hyperlipemia + age + BMI + heart_rate + PH + Respiratory_rate, data = train, kernel = "radial", cost = 1,scale = TRUE,gamma=0.5,probability = T)
table (svm_model_tune$fitted , train$Class )
caret::confusionMatrix(svm_model_tune$fitted,train$Class)
# Test Validation --------------------------------------------
results_tune= predict(svm_model_tune,test[,!names(test) %in% c("Class")],probability = T)
table(results_tune,test$Class)
caret::confusionMatrix(results_tune,test$Class)
roc_svm_tune_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_tune_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
#saveRDS(svm_model_tune,here('object/svm_model_simples.R'))
attr(results, "probability")
attr(results, 'probability')
library(pROC)
attr(results, 'probability')
results= predict(svm_model,test[,!names(test) %in% c("Class")], probability = TRUE)
attr(results, 'probability')
attr(results, 'probability')
results
saveRDS(svm_model_tune,here('object/svm_model_simples.R'))
results_tune= predict(svm_model_tune,test[,!names(test) %in% c("Class")],probability = T)
attr(results_tune,"probabilities")
shiny::runApp('SVM')
names(results)
names(results) <- NULL
cat(results)
factor(results)
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
runApp('SVM')
knitr::opts_chunk$set(
warning=FALSE, message=FALSE, tidy=TRUE,	tidy.opts=list(arrow=TRUE,	indent=2),fig.width = 6, fig.align = 'center', fig.asp=0.618, out.width = '100%')
library(here)
library(tidyverse)
library(e1071)
library(caret)
library(pROC)
library(here)
library(tidyverse)
library(e1071)
library(caret)
library(pROC)
library(ROSE)
knitr::include_graphics(here("camilo-jimenez-vGu08RYjO-s-unsplash.jpg"))
data = read_csv(here('dados/data01.csv'))
data=data[,-2]
data |> head() |> knitr::kable()
apply(data, 2, is.numeric)
data_no_na= data |>
mutate_if(is.numeric, ~replace_na(.,mean(., na.rm = TRUE)))
data_no_na |>  is.na() |> sum()
data_no_na$group = as.factor(data_no_na$group)
table(data_no_na$group) |> prop.table()
data_to_model = data_no_na
data_to_model = rename(data_to_model, "Class"="group")
data_to_model = as.data.frame(data_to_model)
names_data_to_model= str_replace_all( names(data_to_model),"-", "_")
names_data_to_model =str_replace_all(names_data_to_model," ","_")
names(data_to_model) = names_data_to_model
names(data_to_model)
rows_over=filter(data_to_model, Class == "Alive") |> nrow()
rows_to_fill= nrow(data_to_model) + (nrow(data_to_model) - rows_to_fill)
rows_over=filter(data_to_model, Class == "Alive") |> nrow()
rows_to_fill= nrow(data_to_model) + (nrow(data_to_model) - rows_over)
data_balanced_over <- ovun.sample(Class ~ ., data = data_to_model, method = "over",N = rows_to_fill)$data
data_balanced_over
library(here)
library(tidyverse)
library(e1071)
library(caret)
library(pROC)
# Split --------------------------------------------------------
# data_to_model= readRDS(here("object/data_to_model.R"))
#
# factor_columns = c('outcome','hypertensive','gendera', 'atrialfibrillation',"CHD_with_no_MI",'diabetes', 'deficiencyanemias', 'depression','Hyperlipemia', 'Renal_failure', 'COPD')
#
#
# data_to_model= data_to_model |> filter(outcome !='0.135204081632653') |>  mutate_at(factor_columns,as.factor)
#
# saveRDS(data_to_model,here("object/data_to_model.R"))
data_to_model= readRDS(here("object/data_to_model.R"))
data_to_model= data_to_model[,-2]
set.seed(123)
sample_to_model <- sample(c(TRUE, FALSE), nrow(data_to_model), replace=TRUE, prob=c(0.7,0.3))
train  <- data_to_model[sample_to_model, ]
test   <- data_to_model[!sample_to_model, ]
# Model---------------------------------------------------------------
svm_model = svm(Class ~ ., data = train, kernel = "radial", cost = 10,scale = TRUE,gamma=50)
summary (svm_model)
# Training Validation ----------------------------------------------------------
table (svm_model$fitted , train$Class )
caret::confusionMatrix(svm_model$fitted,train$Class)
# Test Validation --------------------------------------------
results= predict(svm_model,test[,!names(test) %in% c("Class")], decision.values = TRUE)
table(results,test$Class)
caret::confusionMatrix(results,test$Class)
# ROC CURVE -------------------------------------------------------------------------------------------
library(pROC)
roc_svm_train <- roc(response = train$Class, predictor =as.numeric(svm_model$fitted))
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results))
plot(roc_svm_train)
plot(roc_svm_test)
# Code by https://rviews.rstudio.com/
roc_svm_test <- roc(response = test$Class, predictor =as.numeric(results),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# tune ---------------------------------------------------------
set.seed (123)
tune.out = tune(svm,
Class ~ .,
data=train,
kernel ="radial",
ranges =list (cost=c(0.1 ,1 ,10 ,100 ,1000),
gamma =c(0.5 ,1 ,2 ,3 ,4) ))
tune.out
svm_model_tune = svm(Class ~ ., data = train, kernel = "radial", cost = 1,scale = TRUE,gamma=0.5)
table (svm_model_tune$fitted , train$Class )
caret::confusionMatrix(svm_model_tune$fitted,train$Class)
# Test Validation --------------------------------------------
results_tune= predict(svm_model_tune,test[,!names(test) %in% c("Class")])
table(results_tune,test$Class)
caret::confusionMatrix(results_tune,test$Class)
roc_svm_tune_test <- roc(response = test$Class, predictor =as.numeric(results_tune),
smoothed = TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
sens.ci <- ci.se(roc_svm_tune_test)
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
#saveRDS(svm_model_tune,here('object/svm_model_final.R'))
